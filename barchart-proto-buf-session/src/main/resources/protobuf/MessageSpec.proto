/**
 * Copyright (C) 2011-2012 Barchart, Inc. <http://www.barchart.com/>
 *
 * All rights reserved. Licensed under the OSI BSD License.
 *
 * http://www.opensource.org/licenses/bsd-license.php
 */
package barchart;

option java_package = "com.barchart.proto.buf.session";
option java_outer_classname = "MessageSpec";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

message SessionPacketMessage {

	enum Type {
		AUTH_REQUEST = 1;
		AUTH_RESPONSE = 2;
		SESSION_CREATE = 3;
		SESSION_DESTROY = 4;
		SESSION_RESPONSE = 5;
		SESSION_HEARTBEAT = 6;
		SESSION_HEARTBEAT_RESPONSE = 7;
		START_TLS = 8;
		STOP_TLS = 9;
		CAPABILITIES = 10;
		TIMESTAMP = 11;
	}

	optional string version = 1;
	optional Type type = 2;
	optional bytes body = 3;

}

/*
 * Client/server commands
 */

message AuthRequestMessage {

	optional string username = 1;
	optional string password = 2;
	optional string group = 3;

}

message AuthResponseMessage {

	enum Status {
		SUCCESS = 0;
		FAILURE = 1;
	}

	optional Status status = 1;
	optional UserMessage user = 2;

}

message UserMessage {

	optional string id = 1;
	optional string username = 2;
	optional string password = 3;
	optional string group = 4;
	repeated string permission = 5;
	repeated ProductMessage product = 6;

}

message ProductMessage {

	optional string id = 1;
	optional sint32 maxSymbols = 2;

}

message SessionCreateMessage {

	optional string userId = 1;
	optional string group = 2;
	optional bool claim = 3;

}

message SessionResponseMessage {

	enum Status {
		ACTIVE = 1;
		DUPLICATE = 2;
		EXPIRED = 3;
		LOCKOUT = 4;
		INVALID = 5;
	}

	optional Status status = 1;
	optional string userId = 2;
	optional string group = 3;
	optional SessionMessage session = 4;

}

message SessionHeartbeatMessage {

	repeated string sessionId = 1;
	optional sint64 localTimestamp = 2;

}

message SessionHeartbeatResponseMessage {

	repeated SessionStatusMessage status = 3;

}

message SessionTimestampMessage {

	optional sint64 localTimestamp = 1;
	optional sint64 peerTimestamp = 2;

}

message SessionStatusMessage {

	optional string sessionId = 1;
	optional SessionResponseMessage.Status status = 2;

}

message SessionDestroyMessage {

	optional string sessionId = 1;

}

message SessionMessage {

	optional string id = 1;
	optional string userId = 2;
	optional string group = 3;
	optional sint64 created = 4;
	optional sint64 renewed = 5;

}

message StartTLSMessage {
}

message StopTLSMessage {
}

message CapabilitiesMessage {

	enum Capabilities {
		PLAINTEXT = 0;
		TLS = 1;
	}

	repeated Capabilities capability = 1;

}
