/**
 * Copyright (C) 2011-2013 Barchart, Inc. <http://www.barchart.com/>
 *
 * All rights reserved. Licensed under the OSI BSD License.
 *
 * http://www.opensource.org/licenses/bsd-license.php
 */

package com.barchart.proto.streamingfeed;

option java_multiple_files = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;


enum BarchartMessageType {
	UNKNOWN = 100;
	SUBSCRIBE_SYMBOL_REQUEST = 101;
	SUBSCRIBE_SYMBOL_RESPONSE = 102;
	SUBSCRIBE_MARKET_ID_REQUEST = 103;
	SUBSCRIBE_MARKET_ID_RESPONSE = 104;
	UNSUBSCRIBE_SYMBOL_REQUEST = 105;
	UNSUBSCRIBE_SYMBOL_RESPONSE = 106;
	UNSUBSCRIBE_MARKET_ID_REQUEST = 107;
	UNSUBSCRIBE_MARKET_ID_RESPONSE = 108;
	MARKET_ID_AVAILABILITY_MESSAGE = 110;
	SYMBOL_LOOKUP_REQUEST = 120;
	SYMBOL_LOOKUP_RESPONSE = 121;
}

// Session message types
enum BarchartSessionMessageType {

	// Server feature support
	CAPABILITIES = 201;

	// Encryption negotiation
	START_TLS = 210;
	STOP_TLS = 211;

	// Heartbeat / keepalive
	PING = 220;
	PONG = 221;

	// Authentication / account management
	AUTH_REQUEST = 230;
	AUTH_RESPONSE = 231;
	ACCOUNT_REQUEST = 232;
	ACCOUNT_RESPONSE = 233;
	PERMISSIONS_REQUEST = 234;
	PERMISSIONS_RESPONSE = 235;

	// Application session maintenance
	SESSION_CREATE = 250;
	SESSION_EXPIRE = 251;
	SESSION_RESPONSE = 252;
	SESSION_STATUS = 253;
	SESSION_RESUME = 254;

}

enum SubscriptionResult {
	SUCCESS = 0;
	SUBSCRIPTION_DENIED = 1;
	MARKET_ID_UNKNOWN = 2;
	SYMBOL_UKNOWN = 3;
	GENERIC_FAILURE = 127;
}



message SubscribeSymbolRequest {
	optional sint64 requestId = 1;
	optional string symbol = 3;
}

message SubscribeSymbolResponse {
	optional sint64 requestId = 1;
	optional string symbol = 2;
	optional SubscriptionResult result = 3;
	optional string message = 4;
}

message SubscribeMarketIdRequest {
	optional sint64 requestId = 1;
	optional sint64 marketId = 2;
}

message UnsubscribeMarketIdRequest {
	optional sint64 requestId = 1;
	optional sint64 marketId = 2;
}

message SubscribeMarketIdResponse {
	optional sint64 requestId = 1;
	optional sint64 marketId = 2;
	optional SubscriptionResult result = 3;
	optional string message = 4;	
}

message UnsubscribeMarketIdResponse {
	optional sint64 requestId = 1;
	optional sint64 marketId = 2;
	optional SubscriptionResult result = 3;
	optional string message = 4;	
}

message SymbolLookupRequest {
	optional sint64 requestId = 1;
	optional string symbolQuery = 2;
}

message SymbolLookupResponse {

	enum Status {
		SUCCESS = 0;
		GENERIC_FAILURE = 127;
	}

	optional sint64 requestId = 1;
	optional string symbolQuery = 2;
	optional sint64 marketId = 3;
	optional Status status = 4;
}

message MarketIdAvailabilityMessage {
	repeated sint64 availableMarketIds = 1;
}