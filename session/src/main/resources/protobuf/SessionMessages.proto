/**
 * Copyright (C) 2011-2013 Barchart, Inc. <http://www.barchart.com/>
 *
 * All rights reserved. Licensed under the OSI BSD License.
 *
 * http://www.opensource.org/licenses/bsd-license.php
 */

package com.barchart.proto.buf.session;

// Builder options
option java_multiple_files = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

// Session message types
enum BarchartSessionMessageType {

        // Server feature support
        CAPABILITIES = 201;

        // Encryption negotiation
        START_TLS = 210;
        STOP_TLS = 211;

        // Heartbeat / keepalive
        PING = 220;
        PONG = 221;

        // Authentication / account management
        AUTH_REQUEST = 230;
        AUTH_RESPONSE = 231;
        ACCOUNT_REQUEST = 232;
        ACCOUNT_RESPONSE = 233;
        PERMISSIONS_REQUEST = 234;
        PERMISSIONS_RESPONSE = 235;

        // Application session maintenance
        SESSION_CREATE = 250;
        SESSION_EXPIRE = 251;
        SESSION_RESPONSE = 252;
        SESSION_STATUS = 253;
        SESSION_RESUME = 254;
}


/*
 * Server feature support
 */

message CapabilitiesMessage {
	repeated string capability = 1;
	optional string version = 2;
	optional string minVersion = 3;
}

/*
 * Encryption negotiation
 */

message StartTLSMessage {
	optional uint32 reference = 1;
}

message StopTLSMessage {
	optional uint32 reference = 1;
}

/*
 * Connection heartbeat
 */

message PingMessage {
	optional uint32 reference = 1;
	optional sint64 timestamp = 2;
}

message PongMessage {
	optional uint32 reference = 1;
	optional sint64 timestamp = 2;
	optional sint64 pinged = 3;
}

/*
 * Authentication
 */

message AuthRequestMessage {
	optional uint32 reference = 1;
	optional string username = 2;
	optional bytes secret = 3;
	optional string method = 4;
	optional string scheme = 5;
	optional string domain = 6;
	optional string source = 7;
	optional string device = 8;
	// If this is a delegated auth request for a downstream client,
	// set to true and the result will not affect the authorized user
	// for the current session.
	optional bool delegation = 9;
}

message AuthResponseMessage {

	enum Status {
		AUTHENTICATED = 0;
		INVALID = 1;
		LOCKED = 2;
	}

	optional uint32 reference = 1;
	optional Status status = 2;
	optional AccountMessage account = 3;

}

// Request details for the currently authorized account
message AccountRequestMessage {
	optional uint32 reference = 1;
}

message AccountResponseMessage {
	optional uint32 reference = 1;
	optional AccountMessage account = 2;
}

message AccountMessage {

	enum Status {
		ACTIVE = 0;
		LOCKED = 1;
	}

	optional string id = 1;
	optional Status status = 2;
	optional string scheme = 3;
	optional string domain = 4;
	optional string username = 5;
	optional string billingId = 6;

}

message PermissionsRequestMessage {
	optional uint32 reference = 1;
	optional string prefix = 2;
	optional string name = 3;
	// If account is omitted, it will use the currently authorized account.
	// If another account is specified but not allowed, response will return nothing.
	optional string account = 4;
}

message PermissionsResponseMessage {

	message Permission {
		optional string name = 1;
		optional bytes value = 2;
	}

	optional uint32 reference = 1;
	optional string account = 2;
	repeated Permission permission = 3;

}

/*
 * Session management
 */

message SessionCreateMessage {
	optional uint32 reference = 1;
	optional string account = 2;
	optional string service = 3;
	optional string device = 4;
	optional bool claim = 5;
	optional bytes context = 6;
}

message SessionResumeMessage {
	optional uint32 reference = 1;
	optional string sessionId = 2;
}

message SessionExpireMessage {
	optional uint32 reference = 1;
	optional string sessionId = 2;
}

message SessionResponseMessage {
	optional uint32 reference = 1;
	optional SessionMessage.Status status = 2;
	optional string requested = 3;
	optional SessionMessage session = 4;
}

message SessionRenewMessage {
	optional uint32 reference = 1;
	repeated string sessionId = 2;
	optional bytes context = 3;
}

message SessionStatus{
	optional uint32 reference = 1;
	optional string sessionId = 2;
	optional SessionMessage.Status status = 3;
}


message SessionMessage {

	enum Status {
		ACTIVE = 1;
		DUPLICATE = 2;
		EXPIRED = 3;
		LOCKOUT = 4;
		INVALID = 5;
	}

	optional string id = 1;
	optional Status status = 2;
	optional string account = 3;
	optional string service = 4;
	optional string device = 5;
	optional sint64 created = 6;
	optional sint64 renewed = 7;
	optional uint32 timeout = 8;

	optional bytes context = 9;

}
