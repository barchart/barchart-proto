/**
 * Copyright (C) 2011-2013 Barchart, Inc. <http://www.barchart.com/>
 *
 * All rights reserved. Licensed under the OSI BSD License.
 *
 * http://www.opensource.org/licenses/bsd-license.php
 */

// Session name space.
package com.barchart.proto.buf.session;

// Builder options.
option java_multiple_files = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;


// Session Messages are types 101-199
enum SessionMessageType {

    AUTH_REQUEST = 101;
    AUTH_RESPONSE = 102;

    SESSION_CREATE = 103;
    SESSION_DESTROY = 104;
    SESSION_RESPONSE = 105;


    HEARTBEAT_REQUEST = 106;

    HEARTBEAT_RESPONSE = 107;

    START_TLS = 108;
    STOP_TLS = 109;

    CAPABILITIES = 110;
    TIMESTAMP = 111;

    SESSION_RESUME = 112;

}


// Session message.
message SessionPacketMessage {
	optional SessionMessageType type = 1;
	optional string version = 2;
	optional string reference = 3;
	optional bytes body = 4;
}

/*
 * Client/server commands
 */
message AuthRequestMessage {
	optional string username = 1;
	optional string password = 2;
	optional string group = 3;
}

message AuthResponseMessage {

	enum Status {
		SUCCESS = 0;
		FAILURE = 1;
	}

	optional Status status = 1;
	optional UserMessage user = 2;

}

message UserMessage {

	optional string id = 1;
	optional string username = 2;
	optional string password = 3;
	optional string group = 4;
	repeated string permission = 5;
	repeated ProductMessage product = 6;

}

message ProductMessage {

	optional string id = 1;
	optional sint32 maxSymbols = 2;

}

message SessionCreateMessage {

	optional string userId = 1;
	optional string group = 2;
	optional bool claim = 3;

}

// MJS: This allows clients to "reclaim" existing sessions on reconnect if they were disconnected.
// Behavior is:
// 1 - If simple timeout we get back the same session with an updated renewed time
// 2 - If purged from the session store after the flush time it is same as createSession
// It is in a way a message similar to SessionCreateMessage as we transmit just enough info to
// get back session info in #1 and create a new session in #2
message SessionResumeMessage {

	optional string sessionId = 1;
}

message SessionResponseMessage {

	enum Status {
		ACTIVE = 1;
		DUPLICATE = 2;
		EXPIRED = 3;
		LOCKOUT = 4;
		INVALID = 5;
	}

	optional Status status = 1;
	optional string userId = 2;
	optional string group = 3;
	optional SessionMessage session = 4;

}

message SessionHeartbeatMessage {

	repeated string sessionId = 1;
	optional sint64 localTimestamp = 2;

}

message SessionHeartbeatResponseMessage {

	repeated SessionStatusMessage status = 3;

}

message SessionTimestampMessage {

	optional sint64 localTimestamp = 1;
	optional sint64 peerTimestamp = 2;

}

message SessionStatusMessage {

	optional string sessionId = 1;
	optional SessionResponseMessage.Status status = 2;

}

message SessionDestroyMessage {

	optional string sessionId = 1;

}

message SessionMessage {

	optional string id = 1;
	optional string userId = 2;
	optional string group = 3;
	optional sint64 created = 4;
	optional sint64 renewed = 5;

}

message StartTLSMessage {
}

message StopTLSMessage {
}

message CapabilitiesMessage {

	enum Capabilities {
		PLAINTEXT = 0;
		TLS = 1;
	}

	repeated Capabilities capability = 1;

}
