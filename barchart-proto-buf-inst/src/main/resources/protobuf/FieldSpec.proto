/**
 * Copyright (C) 2011-2013 Barchart, Inc. <http://www.barchart.com/>
 *
 * All rights reserved. Licensed under the OSI BSD License.
 *
 * http://www.opensource.org/licenses/bsd-license.php
 */

// Non-java (C, C++, etc) package name space.
package barchart;

// Builder options.
option java_package = "com.barchart.proto.buf.inst";
option java_outer_classname = "FieldSpec";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

// Message options descriptor.
import "google/protobuf/descriptor.proto";

// Define static message fields for meta data.
extend google.protobuf.MessageOptions {
	optional string optionEnumNameSuffix = 50001; // message type enum name suffix
	optional string optionExtensionPrefix = 50002; // message extension name prefix
}

// Market depth liquidity type.
enum BookLiquidity {
	// Market without any book.
	NO_BOOK_LIQUIDITY = 0;
	// Unspecified/Default liquidity type.
	DEFAULT_LIQUIDITY = 1;
	// Book reflects only implied transactions.
	IMPLIED_LIQUIDITY = 2;
	// Book reflects both implied and explicit transactions
	COMBINED_LIQUIDITY = 3;
}

// Market depth structure / implementation.
enum BookStructure {
	// Market without any book.
	NO_BOOK_STRUCTURE = 0;
	// Book uses explicit level/index
	PRICE_LEVEL_STRUCTURE = 1;
	// Book uses price entry value.
	PRICE_VALUE_STRUCTURE = 2;
	// Book uses order number.
	ORDER_NUMBER_STRUCTURE = 3;
}

// Option type.
enum OptionType {
	CALL_OPTION = 1;
	PUT_OPTION = 2;
}

// Option style.
enum OptionStyle {
	DEFAULT_STYLE = 0;
	AMERICAN_STYLE = 1;
	EUROPEAN_STYLE = 2;
}

// Spread type.
enum SpreadType {
	DEFAULT_SPREAD = 0;
	CONDOR_SPREAD = 1;
	BUTTERFLY_SPREAD = 2;
	CRACK_SPREAD = 3;
}

// Price value.
message Decimal {
	optional sint64 mantissa = 1;
	optional sint32 exponent = 2;
}

// Time interval.
message Interval {

	// Beginning of time interval.
	optional sint64 timeStart = 1; // millisFIX, can be UTC or local time zone.

	// Ending of time interval.
	optional sint64 timeFinish = 2; // millisFIX, can be UTC or local time zone.
}

// Market life cycle events.
message Calendar {

	// Time span between market inception and termination, millisFIX, UTC.
	// FIXME define range limit values: plus/minus infinity, missing, etc?
	optional Interval lifeTime = 1;

	// Standard market hours, millisFIX.
	// FIXME static? dynamic? local market time zone? UTC?
	repeated Interval marketHours = 2;
}
